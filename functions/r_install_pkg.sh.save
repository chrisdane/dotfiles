#!/bin/bash

set -e
echo "*******************************************"

#################### start user input ####################

# which packages to install
#pkgs=(rgeos proj4 sf)
pkgs=sf
#pkgs=terra
#pkgs=raster
#pkgs=units
#pkgs=oce

# mirror do download package source
repos="https://cloud.r-project.org"

# choose machine-and-r-and-compiler-combination:

if true; then # case 1: mistral r-3.6.1 gcc-9.1.0
#if false; then
    echo "module purge"; module purge
    echo "module load r/3.6.1-gcc-9.1.0 gcc/9.1.0-gcc-7.1.0"
    module load r/3.6.1-gcc-9.1.0 gcc/9.1.0-gcc-7.1.0
    lib=~/scripts/r/packages/bin/r_3.6
    
    #gdal_path=/sw/spack-rhel6/gdal-3.0.1-gs7y3t
    #geos_path=/sw/spack-rhel6/geos-3.7.2-gscs6a
    #proj_path=/sw/spack-rhel6/proj-6.2.0-psms4p
    #sqlite_path=/sw/spack-rhel6/sqlite-3.30.1-bekvvp
    #udunits_path=/sw/spack-rhel6/udunits-2.2.24-fpumit
    gdal_path=/sw/spack-rhel6/gdal-3.1.3-f7koyc
    geos_path=/sw/spack-rhel6/geos-3.8.1-ru2zkr
    proj_path=/sw/spack-rhel6/proj-7.1.0-w57onb
    sqlite_path=/sw/spack-rhel6/sqlite-3.34.0-gnklvh
    udunits_path=/sw/spack-rhel6/udunits-2.2.28-h6kiqa
fi

#if true; then # case 2: mistral r-3.5.3 gcc-4.8.2
if false; then
    echo "module purge"; module purge
    echo "module load r/3.5.3 gcc/4.8.2"; module load r/3.5.3 gcc/4.8.2
    lib=~/scripts/r/packages/bin/r_3.5
    
    gdal_path=/sw/rhel6-x64/gdal-2.1.3-gcc48 # terra needs gdal >= 2.2.3
    geos_path=/sw/rhel6-x64/geos-3.6.1-gcc48
    proj_path=/sw/rhel6-x64/graphics/proj4-4.9.3-gcc48
    sqlite_path=/sw/spack-rhel6/sqlite-3.30.1-bekvvp
    udunits_path=/sw/rhel6-x64/util/udunits-2.2.17-gcc48
fi

#################### user input end ########################

module list
echo

PATH=${gdal_path}/bin:${geos_path}/bin:${udunits_path}/bin:$PATH
echo "PATH:"
echo $PATH | tr ":" "\n"
echo

echo "LD_LIBRARY_PATH:"
echo $LD_LIBRARY_PATH | tr ":" "\n"
echo unset LD_LIBRARY_PATH
unset LD_LIBRARY_PATH # clean
echo

export PKG_CONFIG_PATH=${proj_path}/lib/pkgconfig:${gdal_path}/lib/pkgconfig
echo "PKG_CONFIG_PATH:"
echo $PKG_CONFIG_PATH | tr ":" "\n"
echo

ldflags='-Wl,-rpath,'${gdal_path}'/lib:'${proj_path}'/lib:'${geos_path}'/lib'
echo "ldflags:"
echo $ldflags | tr "," "\n"
echo

## set package-specific options
# see `./configure --help` of several packages at the bottom
 
install_script=r_pkg_install_tmp.r # temporary install script
cat > ${install_script} <<EOF

pkgs <- "${pkgs[@]}"
pkgs <- strsplit(pkgs, " ")[[1]]
repos <- "$repos"
lib <- "$lib"

message(".libPaths() = \n",
        paste(.libPaths(), collapse="\n"))

for (pkgi in seq_along(pkgs)) {
   
    pkg <- pkgs[pkgi]
    message("\n**************************************************************\n",
            "pkg ", pkgi, "/", length(pkgs), ": \"", pkg, "\"")
    
    configure.args <- NULL # default

    if (pkg == "rgeos") {
        configure.args <- paste0("--with-geos-config=${geos_path}/bin/geos-config ",
                                 "PKG_LIBS=$ldflags")
    
    } else if (pkg == "proj4") {
        configure.args <- paste0("PKG_CPPFLAGS=-I${proj_path}/include ",
                                 "PKG_LIBS='-L${proj_path}/lib ",
                                           "-L${sqlite_path}/lib ",
                                           "$ldflags'")
    
    } else if (pkg == "sf") {
        Sys.setenv(LD_LIBRARY_PATH="${udunits_path}/lib:${LD_LIBRARY_PATH}")
        configure.args <- paste0("--with-gdal-config=${gdal_path}/bin/gdal-config ",
                                 "--with-geos-config=${geos_path}/bin/geos-config ",
                                 "--with-proj-lib=${proj_path}/lib ",
                                 "PKG_LIBS='-L${sqlite_path}/lib ",
                                           "$ldflags'")

    } else if (pkg == "terra") {
        configure.args <- paste0("--with-gdal-config=${gdal_path}/bin/gdal-config ",
                                 "--with-proj-include=${proj_path}/include ",
                                 "--with-proj-lib=${proj_path}/lib ",
                                 "--with-proj-share=${proj_path}/share ",
                                 "--with-geos-config=${geos_path}/bin/geos-config ",
                                 "PKG_LIBS='-L${sqlite_path}/lib ",
                                           "$ldflags'")
    
    } else if (pkg == "units") {
        Sys.setenv(LD_LIBRARY_PATH="${udunits_path}/lib:${LD_LIBRARY_PATH}")
        # or withr::with_envvar(c("LD_LIBRARY_PATH"="${udunits_path}/lib"), install.packages(...))
        configure.args <- paste0("--with-udunits2-lib=${udunits_path}/lib ",
                                 "--with-udunits2-include=${udunits_path}/include")
    
    } else if (pkg == "oce") {
        Sys.setenv(LD_LIBRARY_PATH="${udunits_path}/lib:${LD_LIBRARY_PATH}")
           
    } else if (pkg == "bookdown") {
        stop("update")
        Sys.setenv(PATH="${pandoc_path}/bin:${PATH}")
         
    } # which package
    
    cmdfile <- "${install_script}"
    cmdfile <- paste0(tools::file_path_sans_ext(basename(cmdfile)), "_", pkg, ".", tools::file_ext(cmdfile)) 
    message("create \"", cmdfile, "\" ...")
    file.create(cmdfile)

    message("Sys.getenv(\"LD_LIBRARY_PATH\") = ")
    message(paste(strsplit(Sys.getenv("LD_LIBRARY_PATH"), ":")[[1]], collapse="\n"))
    if (Sys.getenv("LD_LIBRARY_PATH") != "") {
        cmd <- paste0("Sys.setenv(LD_LIBRARY_PATH=\"", Sys.getenv("LD_LIBRARY_PATH"), "\")")
        cat(cmd, file=cmdfile, sep="\n", append=T)
    }
    cmd <- paste0("install.packages(\"", pkg, "\", lib=\"", lib, "\", repos=\"", 
                  repos, "\", configure.args=\"", configure.args, "\")")
    message("run \`", cmd, "\` ...\n")
    cat(cmd, file=cmdfile, sep="\n", append=T)
    eval(parse(text=cmd))
    
    # check if package can be loaded
    if (!require(pkg, lib=lib, character.only=T)) warning("pkg ", pkg, " load error")

    # clean LD_LIBRARY_PATH and check if package can be loaded
    message("Sys.setenv(LD_LIBRARY_PATH=\"\")")
    Sys.setenv(LD_LIBRARY_PATH="")
    if (!require(pkg, lib=lib, character.only=T)) warning("pkg ", pkg, " load error")

} # for pkgi

file.remove("${install_script}") 

EOF

# run temporary install script
#R --no-save < ${install_script}
R --vanilla < ${install_script} # vanilla = --no-save, --no-restore, --no-site-file, --no-init-file and --no-environ


## some `./configure --help` entries:
#
# sf:
# --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
# --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
# --with-gdal-config=GDAL_CONFIG
#                         the location of gdal-config
# --with-data-copy=yes/no local copy of data directories in package, default
#                         no
# --with-proj-data=DIR    location of PROJ data directory
# --with-proj-include=DIR location of proj header files
# --with-proj-api=yes/no  use the deprecated proj_api.h even when PROJ 6 is
#                         available; default no
# --with-proj-lib=LIB_PATH
#                         the location of proj libraries
# --with-proj-share=SHARE_PATH
#                         the location of proj metadata files
# --with-geos-config=GEOS_CONFIG
#                         the location of geos-config
#
# terra (needs raster, Rcpp):
# --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
# --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
# --with-gdal-config=GDAL_CONFIG
#                         the location of gdal-config
# --with-data-copy=yes/no local copy of data directories in package, default
#                         no
# --with-proj-data=DIR    location of PROJ data directory
# --with-proj-include=DIR location of proj header files
# --with-proj-api=yes/no  use the deprecated proj_api.h even when PROJ 6 is
#                         available; default no
# --with-proj-lib=LIB_PATH
#                         the location of proj libraries
# --with-proj-share=SHARE_PATH
#                         the location of proj metadata files
# --with-geos-config=GEOS_CONFIG
#                         the location of geos-config
# 
# rgdal:
# --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
# --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
# --with-gdal-config=GDAL_CONFIG
#                         the location of gdal-config
# --with-proj-include=DIR location of proj header files
# --with-proj-lib=LIB_PATH
#                         the location of proj libraries
# --with-proj_api=ARG        legacy proj_api.h while still available, or current proj.h (ARG="proj_api.h", "proj.h"(default))
# --with-proj-share=SHARE_PATH
#                         the location of proj metadata files
# --with-data-copy=yes/no local copy of data directories in package, default
#                         no
# --with-proj-data=DIR    location of PROJ.4 data directory
#
# proj4:
# --disable-option-checking  ignore unrecognized --enable/--with options
# --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
# --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
# --enable-proj6          use the new PROJ6 API even if PROJ4 API is
#                         available. The default is [disable] since PROJ6 API
#                         has issues, use with caution.
# 
# rgeos:
# --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
# --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
# --with-geos-config=GEOS_CONFIG
#                         the location of geos-config
#
# raster:
#  no configure file in package source
#
# units:
# --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
# --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
# --with-udunits2-include=DIR
#                         location of the udunits2 header files
# --with-udunits2-lib=DIR location of the udunits2 libraries
#

